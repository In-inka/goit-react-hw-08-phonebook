{"version":3,"file":"static/js/355.c73fa29c.chunk.js","mappings":"iPAEaA,EAAaC,EAAAA,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gLAUxBC,EAAQH,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,wbAkBlBG,EAAgBL,EAAAA,GAAAA,MAAYM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,kRAiB5BK,EAAMP,EAAAA,GAAAA,OAAaQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,sS,mBC0ChC,EAnFe,WACb,IAAMO,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,KAAM,GACNC,MAAO,GACPC,SAAU,IAEZC,SAAU,SAACC,EAAKC,GAAqB,IAAjBC,EAASD,EAATC,UAClBX,GAASY,EAAAA,EAAAA,IAASH,IACfI,SACAC,MAAK,kBAAMC,EAAAA,OAAAA,QAAe,mBAADC,OAAoBd,EAAOe,OAAOZ,MAAO,IAClEa,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZJ,EAAAA,OAAAA,QAAe,cAADC,OACEd,EAAOe,OAAOX,MAAK,2BAErC,IACFK,GACF,IAGF,OACEW,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAAA,OAAAE,UACEC,EAAAA,EAAAA,MAACnC,EAAU,CAACoC,QAAQ,OAAOlB,SAAUN,EAAOyB,aAAaH,SAAA,EACvDF,EAAAA,EAAAA,KAAC5B,EAAK,CAAA8B,UACJF,EAAAA,EAAAA,KAAC1B,EAAa,CACZgC,KAAK,OACLC,WAAS,EACTC,YAAY,QACZzB,KAAK,OACLI,MAAOP,EAAOe,OAAOZ,KACrB0B,SAAU7B,EAAO8B,kBAGrBV,EAAAA,EAAAA,KAAC5B,EAAK,CAAA8B,UACJF,EAAAA,EAAAA,KAAC1B,EAAa,CACZgC,KAAK,QACLC,WAAS,EACTC,YAAY,QACZzB,KAAK,QACLI,MAAOP,EAAOe,OAAOX,MACrByB,SAAU7B,EAAO8B,kBAIrBV,EAAAA,EAAAA,KAAC5B,EAAK,CAAA8B,UACJF,EAAAA,EAAAA,KAAC1B,EAAa,CACZgC,KAAK,WACLC,WAAS,EACTC,YAAY,WACZzB,KAAK,WACLI,MAAOP,EAAOe,OAAOV,SACrBwB,SAAU7B,EAAO8B,kBAGrBV,EAAAA,EAAAA,KAACxB,EAAG,CAAC8B,KAAK,SAAQJ,SAAC,iBAuB7B,C","sources":["pages/SignUp/SingUp.styled.jsx","pages/SignUp/SignUp.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SignUpForm = styled.form`\n  width: 400px;\n  padding: 15px;\n  margin: 50px auto;\n  background-color: #add8e6;\n\n  box-shadow: 1px 1px 14px 4px rgba(0, 0, 0, 0.12);\n  border-radius: 15px;\n`;\n\nexport const Label = styled.div`\n  text-decoration: none;\n  padding: 5px;\n  margin-bottom: 5px;\n  box-shadow: 0px 1px 6px rgba(24, 106, 112, 0.8),\n    0px 1px 1px rgba(39, 63, 66, 0.16), 0px 2px 1px rgba(16, 93, 90, 0.16);\n  border-radius: 4px;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2);\n  &:hover {\n    transform: translate(1px, 1px);\n    cursor: pointer;\n  }\n  &:focus {\n    transform: translate(1px, 1px);\n    cursor: pointer;\n  }\n`;\n\nexport const MyStyledInput = styled.input`\n  min-width: 380px;\n  display: inline-block;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  text-transform: uppercase;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const Btn = styled.button`\n  margin-top: 25px;\n  width: 100%;\n  padding: 3px;\n  background-color: #fff;\n  cursor: pointer;\n  font-size: 25px;\n\n  text-transform: uppercase;\n\n  border-radius: 10px;\n  &:hover {\n    background-color: #7cb9e8;\n    box-shadow: 1px 1px 14px 4px rgba(0, 0, 0, 0.12);\n  }\n`;\n","import { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../../redux/operations';\nimport { Btn, Label, MyStyledInput, SignUpForm } from './SingUp.styled';\nimport { Notify } from 'notiflix';\n\nconst SignUp = () => {\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    onSubmit: (value, { resetForm }) => {\n      dispatch(register(value))\n        .unwrap()\n        .then(() => Notify.success(`Congratulations ${formik.values.name}`))\n        .catch(e => {\n          console.log(e);\n          Notify.failure(\n            `This mail  ${formik.values.email} is already registered `\n          );\n        });\n      resetForm();\n    },\n  });\n\n  return (\n    <>\n      <div>\n        <SignUpForm htmlFor=\"name\" onSubmit={formik.handleSubmit}>\n          <Label>\n            <MyStyledInput\n              type=\"text\"\n              autoFocus\n              placeholder=\"login\"\n              name=\"name\"\n              value={formik.values.name}\n              onChange={formik.handleChange}\n            />\n          </Label>\n          <Label>\n            <MyStyledInput\n              type=\"email\"\n              autoFocus\n              placeholder=\"email\"\n              name=\"email\"\n              value={formik.values.email}\n              onChange={formik.handleChange}\n            />\n          </Label>\n\n          <Label>\n            <MyStyledInput\n              type=\"password\"\n              autoFocus\n              placeholder=\"password\"\n              name=\"password\"\n              value={formik.values.password}\n              onChange={formik.handleChange}\n            />\n          </Label>\n          <Btn type=\"submit\">SignUp</Btn>\n        </SignUpForm>\n      </div>\n    </>\n  );\n\n  /*         {() => (\n          <Form>\n            <div>\n              <label htmlFor=\"exampleInputName\">Name</label>\n              <Field name=\"name\" id=\"exampleInputName\" />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"exampleInputEmail\">Email</label>\n              <Field name=\"email\" id=\"exampleInputEmail\" />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"exampleInputPassword\">Password</label>\n              <Field name=\"password\" id=\"exampleInputPassword\" />\n            </div>\n            <button type=\"submit\">Login</button>\n          </Form>\n        )} */\n};\n\nexport default SignUp;\n"],"names":["SignUpForm","styled","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","MyStyledInput","_templateObject3","Btn","_templateObject4","dispatch","useDispatch","formik","useFormik","initialValues","name","email","password","onSubmit","value","_ref","resetForm","register","unwrap","then","Notify","concat","values","catch","e","console","log","_jsx","_Fragment","children","_jsxs","htmlFor","handleSubmit","type","autoFocus","placeholder","onChange","handleChange"],"sourceRoot":""}